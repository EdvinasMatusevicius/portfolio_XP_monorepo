name: Monorepo Docker CI/CD

on:
  push:
    branches:
      - main # or your main branch

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: production
      SERVER_SERVICE_PORT: ${{ secrets.SERVER_SERVICE_PORT }}
      WEB_CLIENT_PORT: ${{ secrets.WEB_CLIENT_PORT }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}

    steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v3
      #   with:
      #     submodules: true

      # - name: Set up SSH key
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa

      #     eval "$(ssh-agent -s)"

      #     echo "${{ secrets.SSH_PASSPHRASE }}" | ssh-add ~/.ssh/id_rsa

      #     ssh-keyscan -H ${{ secrets.SSH_IP }} >> ~/.ssh/known_hosts
          
      # - name: Install Docker Compose (if not already present)
      #   run: |
      #     if ! command -v docker-compose &> /dev/null
      #     then
      #       echo "Docker Compose not found, installing..."
      #       sudo apt-get update
      #       sudo apt-get install -y docker-compose
      #       docker-compose --version
      #     else
      #       echo "Docker Compose already installed."
      #       docker-compose --version
      #     fi
      #     docker --version # Verify Docker is available (should be)
      
      # - name: Build Docker images locally to verify
      #   run: |
      #     docker-compose build


      - name: SSH into VPS and deploy using appleboy/ssh-action
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_IP }}             # The IP address of your VPS
          username: ed                         # The username to SSH into the VPS
          key: ${{ secrets.SSH_KEY }}             # The private SSH key from GitHub Secrets
          passphrase: ${{ secrets.SSH_PASSPHRASE }} # Optional, only if you have a passphrase for your SSH key
          port: 22                                # The port for SSH (default is 22)
          script: |
            cd ~/portfolio_XP_monorepo || exit

            # Pull the latest changes from GitHub (make sure the VPS has Git installed)
            git pull --recurse-submodules

            echo "NODE_ENV=production" > .env
            echo "SERVER_SERVICE_PORT=${{ secrets.SERVER_SERVICE_PORT }}" >> .env
            echo "WEB_CLIENT_PORT=${{ secrets.WEB_CLIENT_PORT }}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
            echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env

            # Stop and remove the existing containers
            docker-compose down

            # Start the containers (this will recreate them if any changes are detected)
            docker-compose up -d

            # Optionally, remove unused Docker images to save space
            docker system prune -f

      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      # - name: set lower case repo name
      #   run: |
      #     echo "REPO_LC=${REPO,,}" >>${GITHUB_ENV}
      #   env:
      #     REPO: '${{ github.repository }}'

      # - name: Build and tag images
      #   run: |
      #     docker build -t ghcr.io/${{ env.REPO_LC }}-server:latest ./packages/server
      #     docker build -t ghcr.io/${{ env.REPO_LC }}-client:latest ./packages/client

      # - name: Push images
      #   run: |
      #     docker push ghcr.io/${{ env.REPO_LC }}-server:latest
      #     docker push ghcr.io/${{ env.REPO_LC }}-client:latest

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3


      # - name: Build and push
      #   uses: docker/build-push-action@v6
      #   with:
      #     push: true
      #     tags: ghcr.io/${{ env.REPO_LC }}:latest