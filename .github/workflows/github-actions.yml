name: Monorepo Docker CI/CD

on:
  push:
    branches:
      - main # or your main branch

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: production
      SERVER_SERVICE_PORT: ${{ secrets.SERVER_SERVICE_PORT }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true
          
      - name: Install Docker Compose (if not already present)
        run: |
          if ! command -v docker-compose &> /dev/null
          then
            echo "Docker Compose not found, installing..."
            sudo apt-get update
            sudo apt-get install -y docker-compose
            docker-compose --version
          else
            echo "Docker Compose already installed."
            docker-compose --version
          fi
          docker --version # Verify Docker is available (should be)
      
      - name: Build Docker images locally to verify
        run: |
          docker-compose build


      - name: SSH into VPS and deploy using appleboy/ssh-action
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_IP }}
          username: ed
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: 22
          script: |
            cd ~/portfolio_XP_monorepo || exit

            # Pull the latest changes from GitHub (make sure the VPS has Git installed)
            git pull --recurse-submodules

            echo "NODE_ENV=production" > .env
            echo "SERVER_SERVICE_PORT=${{ secrets.SERVER_SERVICE_PORT }}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
            echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}" >> .env

            # Stop and remove the existing containers
            docker-compose down

            # Start the containers (this will recreate them if any changes are detected)
            docker-compose up -d

            # Optionally, remove unused Docker images to save space
            docker system prune -f